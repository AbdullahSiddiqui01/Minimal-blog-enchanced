🌟 Minimal Blog

A fully functional, minimal blogging platform built with Next.js (Frontend) and Node.js + Express + MongoDB (Backend).
Designed with industry-standard optimizations, responsive UI, and modern developer practices.

📑 Table of Contents
Project Overview

Technologies Used

Features

Backend Details

Frontend Details

Optimizations & Enhancements

Installation & Running

Environment Variables

Project Structure

Future Enhancements

🔹 Project Overview

Minimal Blog is a modern blogging application where users can:

✍️ Create, read, update, and delete posts (CRUD)

🖼 View posts in a responsive card-based grid

📝 Edit posts inline with pre-filled form data

🗑 Delete posts with confirmation and feedback

It uses Server-Side Rendering (SSR) with Next.js and RESTful APIs built in Node.js with Express, connecting to MongoDB for persistent storage.

💻 Technologies Used

Frontend:

Next.js 13+ (App Router)

React 18+ (Functional components + hooks)

TypeScript

Tailwind CSS (Responsive + Dark Mode + Modern UI)

Backend:

Node.js + Express

MongoDB + Mongoose

dotenv for environment variables

REST APIs (CRUD for posts)

Other Tools:

VSCode / WebStorm

Postman / Insomnia for API testing

Git for version control

🚀 Features

✅ Full CRUD functionality

✅ Dynamic routing for editing posts (/edit/[id])

✅ Responsive design (mobile, tablet, desktop)

✅ Dark mode support

✅ Skeleton loading & error handling

✅ Optimized fetch logic with useCallback

✅ TypeScript interfaces for type safety

✅ Confirmation modal for deletion

✅ SEO-friendly pages with SSR

🗄 Backend Details

Folder: /backend
Server: Node.js + Express

Method	Route	Description
GET	/api/posts	Get all posts
GET	/api/posts/:id	Get a post by ID
POST	/api/posts	Create a new post
PUT	/api/posts/:id	Update a post by ID
DELETE	/api/posts/:id	Delete a post by ID

Database Schema (Mongoose):

interface Post {
  title: string;
  content: string;
  author?: string;
  createdAt?: Date;
}

🖥 Frontend Details

Folder: /frontend

Pages:

/ → Home page (lists all posts)

/create → Create a new post

/edit/[id] → Edit existing post

Components:

PostCard.tsx → Reusable card component for posts

Form.tsx → Reusable form for create/edit

API Integration:

fetch to interact with backend REST APIs

Optimized with useCallback, loading & error states

⚡ Optimizations & Enhancements

Frontend:

✅ TypeScript type safety

✅ Memoized fetch functions with useCallback

✅ Skeleton loading (animate-pulse)

✅ Loading & error states for UX

✅ Dark mode & responsive design

✅ Delete button disables while deleting

Backend:

✅ Async/await for DB operations

✅ Error handling middleware

✅ Proper HTTP status codes

✅ Mongoose schema validations

General Enhancements:

✅ Environment variables for API URLs & DB connections

✅ Clean, industry-standard folder structure

✅ Fully responsive & accessible UI

⚙️ Installation & Running

1. Clone the repository:

git clone <your-repo-url>
cd minimal-blog


2. Backend Setup:

cd backend
npm install


Environment Variables:
Create .env in /backend:

MONGO_URI=your_mongodb_connection_string
PORT=5000


Run Backend:

npm run dev


Server runs on http://localhost:5000

3. Frontend Setup:

cd ../frontend
npm install


Environment Variables:
Create .env.local in /frontend:

NEXT_PUBLIC_API_URL=http://localhost:5000/api/posts


Run Frontend:

npm run dev


Frontend runs on http://localhost:3000

📁 Project Structure
minimal-blog/
│
├─ backend/
│  ├─ models/
│  │  └─ Post.ts
│  ├─ routes/
│  │  └─ posts.ts
│  ├─ server.ts
│  └─ .env
│
├─ frontend/
│  ├─ app/
│  │  ├─ page.tsx
│  │  ├─ layout.tsx
│  │  └─ edit/[id].tsx
│  ├─ components/
│  │  └─ PostCard.tsx
│  ├─ styles/
│  └─ .env.local
│
└─ README.md

🔮 Future Enhancements

User authentication & roles (Admin/User)

Comments & likes on posts

Rich text editor for content

Image upload support

Pagination & search/filter

Server-side caching for faster response